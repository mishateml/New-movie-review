{"version":3,"sources":["data/img/logo/logo.png","components/Header/Header.module.css","components/ListItem/ListItem.module.css","axios-data.js","components/Header/Header.js","components/ListItem/ListItem.js","containers/ListOfMovies/ListOfMovies.js","components/Pagination/Pagination.js","components/Catagories/Catagories.js","containers/MainRoom/MainRoom.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","baseImgUrl","key","instance","axios","create","baseURL","header","props","Navbar","bg","expand","Brand","href","Image","className","classes","Logo","src","logo","roundedCircle","Nav","ListItem","CardInList","Accordion","Card","style","width","Img","variant","poster","Body","Title","title","Collapse","eventKey","Text","about","Button","Toggle","as","ListOfMovies","state","data","page","catArr","selectOtherPage","setState","getDataForLastWeek","get","then","response","results","catch","error","console","log","mapDataArry","obj","filter","dataArr","item","length","push","genre_ids","some","e","cat","includes","map","id","name","overview","poster_path","prevProps","this","dataListToPresent","Row","CardGroup","Component","pagination","active","items","number","Pagination","Item","onClick","click","catagories","arr","i","ToggleButton","value","Container","ToggleButtonGroup","type","vertical","onChange","selected","MainRoom","currentPageNumber","selectedCatagories","getCatData","res","genres","selectPaginationPage","pgCopy","selectedCatagoriesHandler","arrOfCat","Header","Col","md","Catagories","currentPageNum","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.254e5033.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.38aea866.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Header_Logo__2GT5f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardInList\":\"ListItem_CardInList__1X3_z\"};","import axios from \"axios\";\r\nexport const baseImgUrl = \"https://image.tmdb.org/t/p/original\";\r\nexport const key = \"c77614016b93433d8ba60347728e7098\";\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\"\r\n});\r\nexport default instance;\r\n","import React from \"react\";\r\n// bootstrap\r\n\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nimport Image from \"react-bootstrap/Image\";\r\n\r\nimport logo from \"../../data/img/logo/logo.png\";\r\n\r\nimport classes from \"./Header.module.css\";\r\n\r\nconst header = props => {\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\">\r\n      <Navbar.Brand href=\"#home\">\r\n        <Image className={classes.Logo} src={logo} roundedCircle />\r\n      </Navbar.Brand>\r\n      <Nav className=\"mr-auto\">\r\n        <h3>Explore All New Releases </h3>\r\n      </Nav>\r\n      {/* <Button className=\"mr-2\" variant=\"outline-success\">\r\n        Log In\r\n      </Button>\r\n      <Button variant=\"outline-success\">Singh in</Button> */}\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default header;\r\n","import React from \"react\";\r\n\r\nimport classes from \"./ListItem.module.css\";\r\n\r\nimport { Card, Button, Accordion, ButtonGroup } from \"react-bootstrap\";\r\n\r\nconst ListItem = props => {\r\n  return (\r\n    <div className={classes.CardInList}>\r\n      <Accordion>\r\n        <Card style={{ width: \"12rem\" }}>\r\n          <Card.Img variant=\"top\" src={props.poster} />\r\n          <Card.Body>\r\n            <Card.Title>{props.title}</Card.Title>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <div>\r\n                <Card.Text>{props.about}</Card.Text>\r\n                <Button variant=\"primary\">Go somewhere</Button>\r\n              </div>\r\n            </Accordion.Collapse>\r\n            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n              More\r\n            </Accordion.Toggle>\r\n          </Card.Body>\r\n        </Card>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n};\r\nexport default ListItem;\r\n","import React, { Component } from \"react\";\r\nimport axios, { key, baseImgUrl } from \"../../axios-data\";\r\n\r\nimport classes from \"./ListOfMovies.module.css\";\r\nimport { Row, CardGroup } from \"react-bootstrap\";\r\n\r\nimport ListItem from \"../../components/ListItem/ListItem\";\r\n\r\nclass ListOfMovies extends Component {\r\n  state = {\r\n    data: {},\r\n    page: 1,\r\n    catArr: []\r\n  };\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.page !== state.page) {\r\n      return {\r\n        page: props.page\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.page !== prevProps.page) {\r\n      this.getDataForLastWeek(key, this.state.page);\r\n    }\r\n    if (this.props.cat !== prevProps.cat) {\r\n      this.setState({\r\n        catArr: this.props.cat\r\n      });\r\n    }\r\n  }\r\n\r\n  selectOtherPage = page => {\r\n    this.setState({\r\n      page: page\r\n    });\r\n  };\r\n\r\n  getDataForLastWeek = (key, page) => {\r\n    axios\r\n      .get(\r\n        \"discover/movie?api_key=\" +\r\n          key +\r\n          \"&page=\" +\r\n          page +\r\n          \"&sort_by=popularity.desc\"\r\n        // \"discover/tv?api_key=\" +\r\n        //   key +\r\n        //   \"&language=en-US&sort_by=popularity.desc&page=\" +\r\n        //   page +\r\n        //   \"&timezone=America%2FNew_York&include_null_first_air_dates=false\"\r\n      )\r\n      .then(response => {\r\n        // handle success\r\n        this.setState({\r\n          data: response.data.results\r\n        });\r\n        // this.mapDataArry(this.state.data, null);\r\n      })\r\n      .catch(function(error) {\r\n        // handle error\r\n        console.log(error);\r\n      })\r\n      .then(function() {\r\n        // always executed\r\n      });\r\n  };\r\n  componentDidMount() {\r\n    this.getDataForLastWeek(key, this.state.page);\r\n  }\r\n\r\n  mapDataArry = (obj, filter) => {\r\n    let dataArr = [];\r\n    for (let item in obj) {\r\n      if (this.state.catArr.length === 0) {\r\n        dataArr.push(obj[item]);\r\n      } else if (obj[item].genre_ids.some(e => this.props.cat.includes(e))) {\r\n        dataArr.push(obj[item]);\r\n      }\r\n\r\n      // console.log(obj[item].genre_ids.some(e => this.props.cat.includes(e)));\r\n      // A.some(e => B.includes(e) ) #TODO\r\n    }\r\n    let mappedArr;\r\n\r\n    mappedArr = dataArr.map(item => {\r\n      return (\r\n        <ListItem\r\n          key={item.id}\r\n          title={item.name}\r\n          about={item.overview}\r\n          poster={baseImgUrl + item.poster_path}\r\n        />\r\n      );\r\n    });\r\n    return mappedArr;\r\n  };\r\n  render() {\r\n    let dataListToPresent = [];\r\n    dataListToPresent = this.mapDataArry(this.state.data, null);\r\n\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-around\">\r\n          <CardGroup>{dataListToPresent.map(item => item)}</CardGroup>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListOfMovies;\r\n","import React from \"react\";\r\nimport { Pagination } from \"react-bootstrap\";\r\n\r\nconst pagination = props => {\r\n  let active;\r\n  let items = [];\r\n  let numOfPages = 50;\r\n\r\n  active = props.active;\r\n\r\n  for (let number = 1; number <= numOfPages; number++) {\r\n    items.push(\r\n      <Pagination.Item\r\n        key={number}\r\n        active={number === active}\r\n        onClick={() => {\r\n          props.click(number);\r\n        }}\r\n      >\r\n        {number}\r\n      </Pagination.Item>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <Pagination>{items}</Pagination>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default pagination;\r\n","import React, { Component } from \"react\";\r\nimport axios, { key } from \"../../axios-data\";\r\nimport { Container, ToggleButtonGroup, ToggleButton } from \"react-bootstrap\";\r\n\r\nconst catagories = props => {\r\n  let arr = props.cat.map(i => {\r\n    return (\r\n      <ToggleButton variant=\"outline-dark\" key={i.id} value={i.id}>\r\n        {i.name}\r\n      </ToggleButton>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Container className=\"mt-3 \">\r\n      <ToggleButtonGroup\r\n        type=\"checkbox\"\r\n        name=\"cat\"\r\n        vertical\r\n        onChange={props.selected}\r\n      >\r\n        {arr}\r\n      </ToggleButtonGroup>\r\n    </Container>\r\n  );\r\n};\r\nexport default catagories;\r\n","import React, { Component } from \"react\";\r\n// bootstrap react\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios, { key } from \"../../axios-data\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nimport Header from \"../../components/Header/Header\";\r\nimport ListOfMovies from \"../../containers/ListOfMovies/ListOfMovies\";\r\nimport Pagination from \"../../components/Pagination/Pagination\";\r\nimport Catagories from \"../../components/Catagories/Catagories\";\r\nclass MainRoom extends Component {\r\n  state = {\r\n    currentPageNumber: 1,\r\n    catagories: [],\r\n    selectedCatagories: []\r\n  };\r\n  getCatData = (axios, key) => {\r\n    axios\r\n      .get(\"genre/movie/list?api_key=\" + key + \"&language=en-US\")\r\n      .then(response => {\r\n        let arr = [];\r\n        const res = response.data.genres;\r\n        for (let i in res) {\r\n          arr.push(res[i]);\r\n        }\r\n\r\n        this.setState({ catagories: arr });\r\n      })\r\n      .catch(function(error) {\r\n        // handle error\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getCatData(axios, key);\r\n  }\r\n\r\n  selectPaginationPage = page => {\r\n    const pgCopy = { ...this.state };\r\n    pgCopy.currentPageNumber = page;\r\n    this.setState({\r\n      ...pgCopy\r\n    });\r\n  };\r\n\r\n  selectedCatagoriesHandler = arrOfCat => {\r\n    this.setState({\r\n      selectedCatagories: arrOfCat\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <Container>\r\n          <Row>\r\n            <Col md={2}>\r\n              <Catagories\r\n                cat={this.state.catagories}\r\n                selected={this.selectedCatagoriesHandler}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <ListOfMovies\r\n                page={this.state.currentPageNumber}\r\n                cat={this.state.selectedCatagories}\r\n              />\r\n            </Col>\r\n            <Col md={1}>Filleter</Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Pagination\r\n                currentPageNum={this.state.currentPageNumber}\r\n                click={page => {\r\n                  this.selectPaginationPage(page);\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <footer>ADS</footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default MainRoom;\r\n","import React from \"react\";\r\nimport MainRoom from \"./containers/MainRoom/MainRoom\";\r\n\r\nfunction App() {\r\n  return <MainRoom />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}